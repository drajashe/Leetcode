#implementaion of balanced braketsclass Stack():    def __init__(self):        self.items=[]    def isEmpty(self):        return self.items==[]    def pop(self):        return self.items.pop()    def push(self,item1):        return self.items.append(item1)    def size(self):        return len(self.items)    def peep(self):        return self.items[len(self.items)-1]def balanced_brackets(Str1):    s=Stack()    #print s.isEmpty()    Str1=list(Str1)    #print Str1    close_list = {"[":"]","{":"}","(":")","<":">"}    open_list=["{","<","(","["]    i=0    count=0    if( len(Str1)%2 == 0):        return False    while i < len(Str1):        if( Str1[i] in open_list):            s.push(Str1[i])        i=i+1    siz=s.size()    for i in range(s.size()):        popped=s.pop()        if(close_list[popped] in Str1):            Str1.remove(popped)            Str1.remove(close_list[popped])            #print Str1            count=count+1    #print count    if((count==siz)and (len(Str1)==0)):        print "Truly balanced"        return "Balanced"    else:        print "Not Balanced"def balanced_brackets(Str1):    s=Stack()    #print s.isEmpty()    Str1=list(Str1)    #print Str1    close_list = {"[":"]","{":"}","(":")","<":">"}    open_list=["{","<","(","["]    i=0    count=0    if( len(Str1)==0):        return 0    while i < len(Str1):        if( Str1[i] in open_list):            s.push(Str1[i])        i=i+1    siz=s.size()    for i in range(s.size()):        popped=s.pop()        if(close_list[popped] in Str1):            Str1.remove(popped)            Str1.remove(close_list[popped])            #print Str1            count=count+1    #print count    if((count==siz)and (len(Str1)==0)):        print "Truly balanced"        return "Balanced"    else:        print "Not Balanced"balanced_brackets("[]()}")